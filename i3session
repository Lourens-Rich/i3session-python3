#!/usr/bin/env python3

import os
import i3ipc
import sys
import pickle
import subprocess
import logging
from time import sleep
import xdg

def create_session(workspaces):
    nodes = []

    for w in workspaces:
        dict = {}
        dict['workspace'] = w.num
        childs = []
        for window in w.leaves():
            app = {}
            app['name'] = window.name
            app['id'] = window.id
            app['command'] = window.window_class.lower()
            childs.append(app)
        dict['clients'] = childs

        nodes.append(dict)

    return nodes

def restore(workspaces, i3):
    for w in workspaces:
        i3.command('workspace %s' % w['workspace'])
        for window in w['clients']:
            i3.command('exec %s' % window['command'])


# use i3-nagbar to show a message while restoring
def nag_bar_process():
    return subprocess.Popen(["i3-nagbar", "-m", "Currently restoring session. Don't change workspace focus!"])

# print usage instructions
def show_help():
    print(sys.argv[0] + " <save|restore> [workspace]")

if __name__ == '__main__':
    # logging.basicConfig(level=logging.DEBUG)

    # If ~/.i3 doesn't exist use XDG_CONFIG_DIR
    home = os.getenv("HOME")
    config_dir = os.path.join(home, '.i3')
    i3 = i3ipc.Connection()

    if not os.path.isdir(config_dir):
        config_dir = os.path.join(xdg_config_home, 'i3')

    config_file = os.path.join(config_dir, 'session')

    if len(sys.argv) < 2:
        show_help()
        sys.exit(1)

    if sys.argv[1] == 'save':
        print("Saving...")
        session = i3.get_tree()
        nodes = create_session(session.workspaces())

        pickle.dump(nodes, open(config_file, "wb"))
        print("Session saved to " + config_file)
    elif sys.argv[1] == 'restore':
        nag_bar = nag_bar_process()
        print("Restoring...")

        # load session from file
        try:
            session = pickle.load(open(config_file, "rb"))
        except Exception:
            print("Can't restore saved session...")
            sys.exit(1)

        # # traverse tree and send commands to i3 based on what was saved
        # if 'nodes' in session:
        #     if len(sys.argv) > 2:
        #         Tree.restore(session['nodes'], None, sys.argv[2])
        #     else:
        #         Tree.restore(session['nodes']) 

        print(session)
        restore(session, i3)
        nag_bar.terminate()
        print("Session restored from " + config_file)
    else:
        show_help()
        sys.exit(1)
